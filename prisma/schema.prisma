// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  MANAGER
  CLIENT
}

enum OrderStatus {
  PENDING // Order has been created
  COMPLETED // A product was bought
  CANCELED // Order has been cancelled
}

model User {
  id String @id @default(cuid())
  name String?
  username String @unique
  email String @unique
  password String
  age Int

  role Role @default(CLIENT)
  likes Like[]
  orders Order[]

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model RevokedToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  
  createdAt DateTime @default(now())
}


model Product {
  id String @id @default(cuid())
  name String
  description String
  price Float
  stockQuantity Int @default(0)
  category String 
  brand String
  rating Float @default(0.0)
  tags String[]
  size String?
  countryOfOrigin String
  isDisabled Boolean @default(false)
  
  images Image[]
  ordersItems OrderItem[]
  likes Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id String @id @default(cuid())
  url String
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])
}

model Like {
  id String @id @default(cuid())
  userId String
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation 
  user User @relation(fields: [userId] , references: [id])
  product Product @relation(fields: [productId], references: [id])

  // One like object
  @@unique([userId, productId])
}

model Order {
  id String @id @default(cuid())
  userId String
  total Float

  items OrderItem[]
  status OrderStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // relations
  user User @relation(fields: [userId], references: [id])
}

model OrderItem {
  id String @id @default(cuid())
  productId String
  orderId String
  quantity Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product Product @relation(fields:[productId], references: [id])
  order Order @relation(fields: [orderId], references: [id])
}